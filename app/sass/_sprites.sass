/*
  SASS variables are information about icon's compiled state, stored under its original file name

  .icon-home
    width: $icon-home-width

  The large array-like variables contain all information about a single icon
  $icon-home: x y offset_x offset_y width height total_width total_height image_path

  At the bottom of this section, we provide information about the spritesheet itself
  $spritesheet: width height image $spritesheet-sprites
  */
$bullhorn-name: 'bullhorn'
$bullhorn-x: 0px
$bullhorn-y: 0px
$bullhorn-offset-x: 0px
$bullhorn-offset-y: 0px
$bullhorn-width: 50px
$bullhorn-height: 45px
$bullhorn-total-width: 90px
$bullhorn-total-height: 45px
$bullhorn-image: '../images/sprite.png'
$bullhorn: (0px, 0px, 0px, 0px, 50px, 45px, 90px, 45px, '../images/sprite.png', 'bullhorn', )
$check-name: 'check'
$check-x: 50px
$check-y: 0px
$check-offset-x: -50px
$check-offset-y: 0px
$check-width: 40px
$check-height: 40px
$check-total-width: 90px
$check-total-height: 45px
$check-image: '../images/sprite.png'
$check: (50px, 0px, -50px, 0px, 40px, 40px, 90px, 45px, '../images/sprite.png', 'check', )
$bullhorn-2x-name: 'bullhorn@2x'
$bullhorn-2x-x: 0px
$bullhorn-2x-y: 0px
$bullhorn-2x-offset-x: 0px
$bullhorn-2x-offset-y: 0px
$bullhorn-2x-width: 100px
$bullhorn-2x-height: 90px
$bullhorn-2x-total-width: 180px
$bullhorn-2x-total-height: 90px
$bullhorn-2x-image: '../images/sprite@2x.png'
$bullhorn-2x: (0px, 0px, 0px, 0px, 100px, 90px, 180px, 90px, '../images/sprite@2x.png', 'bullhorn@2x', )
$check-2x-name: 'check@2x'
$check-2x-x: 100px
$check-2x-y: 0px
$check-2x-offset-x: -100px
$check-2x-offset-y: 0px
$check-2x-width: 80px
$check-2x-height: 80px
$check-2x-total-width: 180px
$check-2x-total-height: 90px
$check-2x-image: '../images/sprite@2x.png'
$check-2x: (100px, 0px, -100px, 0px, 80px, 80px, 180px, 90px, '../images/sprite@2x.png', 'check@2x', )
$spritesheet-width: 90px
$spritesheet-height: 45px
$spritesheet-image: '../images/sprite.png'
$spritesheet-sprites: ($bullhorn, $check, )
$spritesheet: (90px, 45px, '../images/sprite.png', $spritesheet-sprites, )
$retina-spritesheet-width: 180px
$retina-spritesheet-height: 90px
$retina-spritesheet-image: '../images/sprite@2x.png'
$retina-spritesheet-sprites: ($bullhorn-2x, $check-2x, )
$retina-spritesheet: (180px, 90px, '../images/sprite@2x.png', $retina-spritesheet-sprites, )

/*
  These "retina group" variables are mappings for the naming and pairing of normal and retina sprites.

  The list formatted variables are intended for mixins like `retina-sprite` and `retina-sprites`.
  */
$bullhorn-group-name: 'bullhorn'
$bullhorn-group: ('bullhorn', $bullhorn, $bullhorn-2x, )
$check-group-name: 'check'
$check-group: ('check', $check, $check-2x, )
$retina-groups: ($bullhorn-group, $check-group, )

/*
  The provided mixins are intended to be used with the array-like variables

  .icon-home
    @include sprite-width($icon-home)

  .icon-email
    @include sprite($icon-email)

  Example usage in HTML:
    `display: block` sprite:
    <div class="icon-home"></div>

  To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
    // CSS
    .icon {
      display: inline-block;
    }

    // HTML
    <i class="icon icon-home"></i>
  */
@mixin sprite-width($sprite)
  width: nth($sprite, 5)

@mixin sprite-height($sprite)
  height: nth($sprite, 6)

@mixin sprite-position($sprite)
  $sprite-offset-x: nth($sprite, 3)
  $sprite-offset-y: nth($sprite, 4)
  background-position: $sprite-offset-x  $sprite-offset-y

@mixin sprite-image($sprite)
  $sprite-image: nth($sprite, 9)
  background-image: url(#{$sprite-image})

@mixin sprite($sprite)
  @include sprite-image($sprite)
  @include sprite-position($sprite)
  @include sprite-width($sprite)
  @include sprite-height($sprite)

/*
  The `retina-sprite` mixin sets up rules and a media query for a sprite/retina sprite.
    It should be used with a "retina group" variable.

  The media query is from CSS Tricks: https://css-tricks.com/snippets/css/retina-display-media-query/

  $icon-home-group: ('icon-home', $icon-home, $icon-home-2x, )

  .icon-home
    @include retina-sprite($icon-home-group)
  */
@mixin sprite-background-size($sprite)
  $sprite-total-width: nth($sprite, 7)
  $sprite-total-height: nth($sprite, 8)
  background-size: $sprite-total-width $sprite-total-height

@mixin retina-sprite($retina-group)
  $normal-sprite: nth($retina-group, 2)
  $retina-sprite: nth($retina-group, 3)
  @include sprite($normal-sprite)

  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)
    @include sprite-image($retina-sprite)
    @include sprite-background-size($normal-sprite)

/*
  The `sprites` mixin generates identical output to the CSS template
    but can be overridden inside of SASS

  @include sprites($spritesheet-sprites)
  */
@mixin sprites($sprites)
  @each $sprite in $sprites
    $sprite-name: nth($sprite, 10)
    .#{$sprite-name}
      @include sprite($sprite)

/*
  The `retina-sprites` mixin generates a CSS rule and media query for retina groups
    This yields the same output as CSS retina template but can be overridden in SASS

  @include retina-sprites($retina-groups)
  */
@mixin retina-sprites($retina-groups)
  @each $retina-group in $retina-groups
    $sprite-name: nth($retina-group, 1)
    .#{$sprite-name}
      @include retina-sprite($retina-group)
